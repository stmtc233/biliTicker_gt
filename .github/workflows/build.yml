name: Build Releases

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: bili_ticket_gt_server
            asset_name: bili-ticket-gt-server-linux-x86_64
            
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: bili_ticket_gt_server.exe
            asset_name: bili-ticket-gt-server-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build with cargo
      run: cargo build --release --target ${{ matrix.target }}

    - name: List build artifacts (debug) - Unix
      if: runner.os != 'Windows'
      run: |
        echo "Contents of target/${{ matrix.target }}/release/:"
        ls -la target/${{ matrix.target }}/release/ || echo "Directory not found"

    - name: List build artifacts (debug) - Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "Contents of target/${{ matrix.target }}/release/:"
        Get-ChildItem -Path "target/${{ matrix.target }}/release/" -Force | Format-Table -AutoSize

    - name: Find and strip binary (Unix)
      if: runner.os != 'Windows'
      run: |
        # 查找实际的二进制文件
        BINARY_FILE=$(find target/${{ matrix.target }}/release/ -maxdepth 1 -type f -executable -name "*ticket*" | head -n 1)
        if [ -z "$BINARY_FILE" ]; then
          echo "Could not find binary file"
          exit 1
        fi
        echo "Found binary at: $BINARY_FILE"
        strip "$BINARY_FILE"
        echo "BINARY_FILE=$BINARY_FILE" >> $GITHUB_ENV

    - name: Find binary (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $targetPath = "target\${{ matrix.target }}\release\"
        Write-Host "Looking for binary in: $targetPath"
        
        # 查找包含 ticket 的 exe 文件
        $binaryFiles = Get-ChildItem -Path $targetPath -Filter "*ticket*.exe" -ErrorAction SilentlyContinue
        if ($binaryFiles.Count -eq 0) {
          Write-Host "No *ticket*.exe files found, looking for any exe files..."
          $binaryFiles = Get-ChildItem -Path $targetPath -Filter "*.exe" -ErrorAction SilentlyContinue
        }
        
        if ($binaryFiles.Count -eq 0) {
          Write-Error "Could not find any binary file"
          exit 1
        }
        
        $binaryFile = $binaryFiles[0]
        $fullBinaryPath = $binaryFile.FullName
        Write-Host "Found binary at: $fullBinaryPath"
        
        # 将路径写入环境变量，使用正斜杠以便在后续步骤中使用
        $envPath = $fullBinaryPath -replace '\\', '/'
        Add-Content -Path $env:GITHUB_ENV -Value "BINARY_FILE=$envPath"

    - name: Create artifact directory
      run: mkdir -p artifacts

    - name: Copy binary to artifacts (Unix)
      if: runner.os != 'Windows'
      run: cp "$BINARY_FILE" artifacts/${{ matrix.asset_name }}

    - name: Copy binary to artifacts (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $sourcePath = $env:BINARY_FILE -replace '/', '\'
        $destPath = "artifacts\${{ matrix.asset_name }}"
        Write-Host "Copying from: $sourcePath"
        Write-Host "Copying to: $destPath"
        Copy-Item -Path $sourcePath -Destination $destPath

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts/${{ matrix.asset_name }}
        retention-days: 30

  # 创建 GitHub Release（仅当推送标签时）
  # create-release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: startsWith(github.ref, 'refs/tags/v')
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Download all artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: artifacts

  #   - name: Create checksums
  #     run: |
  #       cd artifacts
  #       for dir in */; do
  #         cd "$dir"
  #         sha256sum * > checksums.txt
  #         cd ..
  #       done

  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref_name }}
  #       release_name: Release ${{ github.ref_name }}
  #       draft: false
  #       prerelease: false

  #   - name: Upload Release Assets
  #     run: |
  #       cd artifacts
  #       for dir in */; do
  #         cd "$dir"
  #         for file in *; do
  #           echo "Uploading $file"
  #           curl \
  #             -X POST \
  #             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #             -H "Content-Type: application/octet-stream" \
  #             --data-binary @"$file" \
  #             "${{ steps.create_release.outputs.upload_url }}=$(echo $file | sed 's/ /%20/g')"
  #         done
  #         cd ..
  #       done

  # 可选：Docker 构建
  # docker:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name != 'pull_request'
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Download Linux x86_64 artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: bili-ticket-gt-server-linux-x86_64
  #       path: .

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Log in to Docker Hub (optional)
  #     if: github.event_name != 'pull_request'
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: your-dockerhub-username/bili-ticket-gt-server
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=semver,pattern={{version}}
  #         type=semver,pattern={{major}}.{{minor}}

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       platforms: linux/amd64
  #       push: ${{ github.event_name != 'pull_request' }}
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max